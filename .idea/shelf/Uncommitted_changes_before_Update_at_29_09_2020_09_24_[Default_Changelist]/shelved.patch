Index: app/Http/Controllers/UserController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\nuse Illuminate\\Support\\Facades\\DB;\r\nuse JWTAuth;\r\nuse JWTAuthException;\r\nuse Hash;\r\nuse App\\User;\r\n\r\nclass UserController extends Controller\r\n{\r\n    private $user;\r\n\r\n    public function __construct(User $user)\r\n    {\r\n        $this->user = $user;\r\n    }\r\n\r\n    public function register(Request $request)\r\n    {\r\n        $user = DB::table('users')->where('username', $request->get('username'))->first();\r\n\r\n        if ($user) {\r\n            return response()->json([\r\n                'status' => 0,\r\n                'message' => 'Tài khoản đã tồn tại',\r\n            ]);\r\n        }\r\n        $user = $this->user->create([\r\n            'username' => $request->get('username'),\r\n            'name' => $request->get('name'),\r\n            'email' => $request->get('email'),\r\n            'password' => Hash::make($request->get('password'))\r\n        ]);\r\n\r\n        return response()->json([\r\n            'status' => 200,\r\n            'message' => 'Tạo mới thành công',\r\n            'data' => $user\r\n        ]);\r\n    }\r\n\r\n    public function login(Request $request)\r\n    {\r\n        $credentials = $request->only('username', 'password');\r\n        $token = null;\r\n        try {\r\n            if (!$token = JWTAuth::attempt($credentials)) {\r\n                return response()->json([\r\n                    'status' => 0,\r\n                    'message' => 'invalid_username_or_password'\r\n                ]);\r\n            }\r\n        } catch (JWTAuthException $e) {\r\n            return response()->json(['failed_to_create_token'], 500);\r\n        }\r\n        return response()->json([\r\n            'status' => 200,\r\n            'message' => 'Login successfully',\r\n            'data' => compact('token')\r\n        ]);\r\n    }\r\n\r\n    public function getUserInfo(Request $request)\r\n    {\r\n        $user = JWTAuth::toUser($request->token);\r\n        if ($user) {\r\n            return response()->json([\r\n                'data' => $user,\r\n                'status' => 200\r\n            ]);\r\n        }\r\n    }\r\n    public function logout()\r\n    {\r\n        JWTAuth::logout();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Http/Controllers/UserController.php	(revision 0a20fdb14816550f6b4b38872f3946b5a5524553)
+++ app/Http/Controllers/UserController.php	(date 1601346295117)
@@ -2,6 +2,7 @@
 
 namespace App\Http\Controllers;
 
+use Carbon\Carbon;
 use Illuminate\Http\Request;
 use Illuminate\Support\Facades\DB;
 use JWTAuth;
@@ -32,7 +33,8 @@
             'username' => $request->get('username'),
             'name' => $request->get('name'),
             'email' => $request->get('email'),
-            'password' => Hash::make($request->get('password'))
+            'password' => Hash::make($request->get('password')),
+            'avatarUrl' => $request->get('avatarUrl')
         ]);
 
         return response()->json([
@@ -42,6 +44,41 @@
         ]);
     }
 
+    public function update(Request $request, $id)
+    {
+        try {
+            $user = DB::table('users')->where('id', $id);
+            if (!$user) {
+                return response()->json([
+                    'status' => 500,
+                    'message' => 'Không thể cập nhật'
+                ]);
+            } else {
+                $user = DB::table('users')->where('id', $id)->update([
+                    'name' => $request->get('name'),
+                    'email' => $request->get('email'),
+                    'password' => Hash::make($request->get('password')),
+                    'avatarUrl' => $request->get('avatarUrl'),
+                    'updated_at' => Carbon::now(),
+                ]);
+                return response()->json([
+                    'status' => 200,
+                    'message' => 'Cập nhật thành công',
+                    'data' => [
+                        'id' => $id,
+                        'name' => $request->get('name')
+                    ]
+                ], 200);
+            }
+        } catch (\Throwable $e) {
+            report($e);
+            return response()->json([
+                'status' => 500,
+                'message' => $e,
+            ], 500);
+        }
+    }
+
     public function login(Request $request)
     {
         $credentials = $request->only('username', 'password');
